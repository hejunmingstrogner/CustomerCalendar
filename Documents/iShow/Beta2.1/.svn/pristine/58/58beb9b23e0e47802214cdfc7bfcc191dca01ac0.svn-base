//
//  EditVideoViewController.m
//  VideoProject_0.1Beta
//
//  Created by once_CH on 2016/10/21.
//  Copyright © 2016年 CX. All rights reserved.
//

#import "EditVideoViewController.h"
#import "XYVideoModel.h"
#import <MediaPlayer/MediaPlayer.h>
#import "UIView+Layout.h"
#import "TZImageManager.h"
#import "TZImagePickerController.h"
#import "ICGVideoTrimmerView.h"
#import "EffectsViewController.h"


@interface EditVideoViewController ()<ICGVideoTrimmerDelegate>
@property (assign, nonatomic) BOOL isPlaying;
@property (strong, nonatomic) AVPlayer *player;
//@property (strong, nonatomic) AVPlayerItem *playerItem;
@property (strong, nonatomic) AVPlayerLayer *playerLayer;
@property (strong, nonatomic) NSTimer *playbackTimeCheckerTimer;
@property (assign, nonatomic) CGFloat videoPlaybackPosition;

@property (strong, nonatomic)  ICGVideoTrimmerView *trimmerView;
@property (strong, nonatomic)  UIButton *trimButton;
@property (strong, nonatomic)  UIView *videoPlayer;
@property (strong, nonatomic)  UIView *videoLayer;

@property (strong, nonatomic) NSString *tempVideoPath;
@property (strong, nonatomic) AVAssetExportSession *exportSession;
@property (strong, nonatomic) AVAsset *asset;

@property (assign, nonatomic) CGFloat startTime;
@property (assign, nonatomic) CGFloat stopTime;
@property (strong, nonatomic) UIButton *button;
@property (strong, nonatomic) NSURL *url;

@property (strong, nonatomic) UILabel *timeLabel;
@end

@implementation EditVideoViewController
- (void)viewDidAppear:(BOOL)animated {
//    [self.player description];
//    [self.player pause];
}

- (void)viewDidDisappear:(BOOL)animated {
    [self.player pause];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.title = @"剪辑";
    self.tempVideoPath = [NSTemporaryDirectory() stringByAppendingPathComponent:@"tmpMov.mov"];
//    NSLog(@"  asasd````````     %@",self.tempVideoPath);
    
    // Do any additional setup after loading the view.
    self.view.backgroundColor = [UIColor whiteColor];
    
    [self addBarButtonItem];
    [self configMoviePlayer];
    [self playerBottomButtonView];
//    [self getOutVideo];
//    [self playerVideo];
}
#pragma mark - ICGVideoTrimmerDelegate

- (void)trimmerView:(ICGVideoTrimmerView *)trimmerView didChangeLeftPosition:(CGFloat)startTime rightPosition:(CGFloat)endTime
{
    
    if (startTime != self.startTime) {
        [self seekVideoToPos:startTime];
    }
    self.startTime = startTime;
    self.stopTime = endTime;
    self.timeLabel.text = [NSString stringWithFormat:@"%0.1f",endTime - startTime];
//    NSLog(@"")
    
    
}
- (void)playerBottomButtonView {
    UIView *lineView = [[UIView alloc]initWithFrame:CGRectMake(0,64 + 747*kDistanceWidthRatio + 84*kDistanceWidthRatio, kScreenW, 1)];
    lineView.backgroundColor = [UIColor grayColor];
    [self.view addSubview:lineView];
    
    UILabel *timeLabel = [[UILabel alloc]initWithFrame:CGRectMake(22*kDistanceWidthRatio, 64 + 747*kDistanceWidthRatio , 100, 84*kDistanceWidthRatio)];
    [self.view addSubview:timeLabel];
    
    self.timeLabel = timeLabel;
    UIButton  *button1 = [UIButton buttonWithType:UIButtonTypeCustom];
    button1.frame = CGRectMake(kScreenW - 64*kDistanceWidthRatio, 64 + 747*kDistanceWidthRatio  + 20*kDistanceWidthRatio, 44*kDistanceWidthRatio, 44*kDistanceWidthRatio);
    [button1 setImage:[UIImage imageNamed:@"Cross_screen"] forState:UIControlStateNormal];
    [button1 setImage:[UIImage imageNamed:@"Cross_screen"] forState:UIControlStateHighlighted];
    [self.view addSubview:button1];
    UIButton  *button2 = [UIButton buttonWithType:UIButtonTypeCustom];
    button2.frame = CGRectMake(kScreenW - 194*kDistanceWidthRatio,64 + 747*kDistanceWidthRatio  + 20*kDistanceWidthRatio, 44*kDistanceWidthRatio, 44*kDistanceWidthRatio);
    [button2 setImage:[UIImage imageNamed:@"Full_screen"] forState:UIControlStateNormal];
    [button2 setImage:[UIImage imageNamed:@"Full_screen"] forState:UIControlStateHighlighted];
    [self.view addSubview:button2];

}

- (void)addBarButtonItem {
    _button = [UIButton buttonWithType:UIButtonTypeCustom];
    [_button setTitle:@"" forState:UIControlStateNormal];
    [_button setImage:[UIImage imageNamed:@"Return-1"] forState:UIControlStateNormal];
    [_button setImage:[UIImage imageNamed:@"Return-1"] forState:UIControlStateHighlighted];
    [_button addTarget:self action:@selector(back) forControlEvents:UIControlEventTouchUpInside];
    _button.adjustsImageWhenHighlighted = NO;
    [_button sizeToFit];
    // 设置返回按钮
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:_button];
    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    [button setImage:[UIImage imageNamed:@"Determine"] forState:UIControlStateNormal];
    [button setImage:[UIImage imageNamed:@"Determine"]
            forState:UIControlStateHighlighted];
    [button setTitle:@"" forState:UIControlStateNormal];
    [button addTarget:self action:@selector(saveAsset) forControlEvents:UIControlEventTouchUpInside];
    button.adjustsImageWhenHighlighted = NO;
    [button sizeToFit];
    // 设置返回按钮
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:button];
}
- (void)back {
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)saveAsset {
    
    [self deleteTempFile];
    
    NSArray *compatiblePresets = [AVAssetExportSession exportPresetsCompatibleWithAsset:self.asset];
    if ([compatiblePresets containsObject:AVAssetExportPresetMediumQuality]) {
        
        self.exportSession = [[AVAssetExportSession alloc]
                              initWithAsset:self.asset presetName:AVAssetExportPresetPassthrough];
        // Implementation continues.
        
        NSURL *furl = [NSURL fileURLWithPath:self.tempVideoPath];
        
        self.exportSession.outputURL = furl;
        self.exportSession.outputFileType = AVFileTypeQuickTimeMovie;
        
        CMTime start = CMTimeMakeWithSeconds(self.startTime, self.asset.duration.timescale);
        CMTime duration = CMTimeMakeWithSeconds(self.stopTime - self.startTime, self.asset.duration.timescale);
        CMTimeRange range = CMTimeRangeMake(start, duration);
        self.exportSession.timeRange = range;
        
        [self.exportSession exportAsynchronouslyWithCompletionHandler:^{
            
            switch ([self.exportSession status]) {
                case AVAssetExportSessionStatusFailed:
                
                NSLog(@"Export failed: %@", [[self.exportSession error] localizedDescription]);
                break;
                case AVAssetExportSessionStatusCancelled:
                
                NSLog(@"Export canceled");
                break;
                default:
                NSLog(@"NONE");
                dispatch_async(dispatch_get_main_queue(), ^{
                    NSURL *movieUrl = [NSURL fileURLWithPath:self.tempVideoPath];
//                    UISaveVideoAtPathToSavedPhotosAlbum([movieUrl relativePath], self,@selector(video:didFinishSavingWithError:contextInfo:), nil);
                    EffectsViewController *eff = [[EffectsViewController alloc]init];
                    eff.videoURL = [movieUrl relativePath];
                    eff.isDiss = NO;
                    eff.path = self.tempVideoPath;
                   [self.navigationController pushViewController:eff animated:YES];
                });
                break;
            }
        }];
    }
}
- (void)setModel:(TZAssetModel *)model {
    _model  = model;
}
- (void)configMoviePlayer {
    [[TZImageManager manager] getVideoWithAsset:_model.asset completion:^(AVPlayerItem *playerItem, NSDictionary *info) {
        PHAsset *phAsset = _model.asset;
        if (phAsset.mediaType == PHAssetMediaTypeVideo) {
            PHVideoRequestOptions *options = [[PHVideoRequestOptions alloc] init];
            options.version = PHImageRequestOptionsVersionCurrent;
            options.deliveryMode = PHVideoRequestOptionsDeliveryModeAutomatic;
            
            PHImageManager *manager = [PHImageManager defaultManager];
            [manager requestAVAssetForVideo:phAsset options:options resultHandler:^(AVAsset * _Nullable asset, AVAudioMix * _Nullable audioMix, NSDictionary * _Nullable info) {
//                NSLog(@"-----askjfhak   39r8  %@",info);
                AVURLAsset *urlAsset = (AVURLAsset *)asset;
                _url = urlAsset.URL;
            }];
        }
        dispatch_async(dispatch_get_main_queue(), ^{
            self.asset = [AVAsset assetWithURL:_url];
            self.player = [AVPlayer playerWithPlayerItem:playerItem];
            self.playerLayer = [AVPlayerLayer playerLayerWithPlayer:self.player];
            self.playerLayer.contentsGravity = AVLayerVideoGravityResizeAspectFill;
            self.player.actionAtItemEnd = AVPlayerActionAtItemEndNone;
            self.videoLayer = [[UIView alloc]initWithFrame:CGRectMake(0, 64, kScreenW, 747*kDistanceWidthRatio)];
            self.playerLayer.frame = self.videoLayer.bounds;
            [self.view addSubview:self.videoLayer];

            [self.videoLayer.layer addSublayer:self.playerLayer];
            
            UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapOnVideoLayer:)];
            [self.videoLayer addGestureRecognizer:tap];
            self.videoPlaybackPosition = 0;
            [self tapOnVideoLayer:tap];
            
//            AVAsset *asset = [AVAsset assetWithURL:self.url];
            self.trimmerView = [[ICGVideoTrimmerView alloc]initWithFrame:CGRectMake(0, CGRectGetMaxY(self.videoLayer.frame)+ 232*kDistanceWidthRatio, kScreenW, 113*kDistanceWidthRatio) asset:self.asset];
            [self.trimmerView setThemeColor:[UIColor lightGrayColor]];
//            [self.trimmerView setAsset:assent];
            [self.trimmerView setShowsRulerView:NO];
            [self.trimmerView setTrackerColor:[UIColor cyanColor]];
            [self.trimmerView setLeftThumbImage:[UIImage imageNamed:@"Screenshot"]];
            [self.trimmerView setRightThumbImage:[UIImage imageNamed:@"Screenshot"]];
            [self.trimmerView setDelegate:self];
            // important: reset subviews
            [self.trimmerView resetSubviews];
            [self.view addSubview:self.trimmerView];
        });
    }];
}
-(void)setVideoAsset:(PHAsset *)videoAsset
{
//    self.player = [AVPlayer playerWithPlayerItem:playerItem];
    _videoAsset = videoAsset;
    [[PHImageManager defaultManager] requestPlayerItemForVideo:_videoAsset options:nil resultHandler:^(AVPlayerItem * _Nullable playerItem, NSDictionary * _Nullable info) {
    [self.player replaceCurrentItemWithPlayerItem:playerItem];
    }];
}

#pragma mark - Actions

- (void)deleteTempFile
{
    NSURL *url = [NSURL fileURLWithPath:self.tempVideoPath];
//    NSLog(@"----------%@",self.tempVideoPath);
    NSFileManager *fm = [NSFileManager defaultManager];
    BOOL exist = [fm fileExistsAtPath:url.path];
    
    NSError *err;
    if (exist) {
        [fm removeItemAtURL:url error:&err];
        NSLog(@"file deleted");
        if (err) {
            NSLog(@"file remove error, %@", err.localizedDescription );
        }
    } else {
        NSLog(@"no file by that name");
    }
}



- (void)video:(NSString*)videoPath didFinishSavingWithError:(NSError*)error contextInfo:(void*)contextInfo {
    if (error) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Video Saving Failed"
                                                       delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    } else {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Video Saved" message:@"Saved To Photo Album"
                                                       delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
}

- (void)viewDidLayoutSubviews
{
    self.playerLayer.frame = CGRectMake(0, 0, self.videoLayer.frame.size.width, self.videoLayer.frame.size.height);
}

- (void)tapOnVideoLayer:(UITapGestureRecognizer *)tap
{
    
    if (self.isPlaying) {
        [self.player pause];
        [self stopPlaybackTimeChecker];
    }else {
        [self.player play];
        [self startPlaybackTimeChecker];
    }
    self.isPlaying = !self.isPlaying;
    [self.trimmerView hideTracker:!self.isPlaying];
}

- (void)startPlaybackTimeChecker
{
    [self stopPlaybackTimeChecker];
    
    self.playbackTimeCheckerTimer = [NSTimer scheduledTimerWithTimeInterval:0.1f target:self selector:@selector(onPlaybackTimeCheckerTimer) userInfo:nil repeats:YES];
}

- (void)stopPlaybackTimeChecker
{
    if (self.playbackTimeCheckerTimer) {
        [self.playbackTimeCheckerTimer invalidate];
        self.playbackTimeCheckerTimer = nil;
    }
}

#pragma mark - PlaybackTimeCheckerTimer

- (void)onPlaybackTimeCheckerTimer
{
    self.videoPlaybackPosition = CMTimeGetSeconds([self.player currentTime]);
    
    [self.trimmerView seekToTime:CMTimeGetSeconds([self.player currentTime])];
    if (self.videoPlaybackPosition >= self.stopTime) {
        self.videoPlaybackPosition = self.startTime;
        [self seekVideoToPos: self.startTime];
        [self.trimmerView seekToTime:self.startTime];
    }
}

- (void)seekVideoToPos:(CGFloat)pos
{
    self.videoPlaybackPosition = pos;
    CMTime time = CMTimeMakeWithSeconds(self.videoPlaybackPosition, self.player.currentTime.timescale);
    [self.player seekToTime:time toleranceBefore:kCMTimeZero toleranceAfter:kCMTimeZero];
}

//- (void)setUrlString:(NSString *)urlString
@end
