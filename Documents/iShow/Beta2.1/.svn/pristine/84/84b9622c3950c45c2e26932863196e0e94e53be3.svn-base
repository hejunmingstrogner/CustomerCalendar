/*
 Copyright(C) 2013-2014 MotionPortrait, Inc. All Rights Reserved.
 */

#import <UIKit/UIKit.h>
#include "MpMovie.h"
#include "MpMovieTypes.h"

#define DISPLAY_REFRESH_RATE (60)

typedef motionportrait::MpMovie  MpMovie;
typedef motionportrait::MpFaceGenerator MpFaceGenerator;

@protocol MpMovieIfDelegate <NSObject>

/**
 * Notify MpMovie playback has finished.
 *
 */
- (void)PlaybackMovieFinished:(int)status;

/**
 * Notify MpMovie genaration has finished.
 *
 */
- (void)GenerateMovieFinished:(int)status;

/**
 * Notify facedata generation has finished.
 *
 * @param ret       Result of GenerateFace
 * @param faceData  faceData object (if ret is not kSuccess, this faceData cannot be used
 *
 */
- (void)GenerateFaceFinished:(MpMovieResult)ret faceData:(MpMovie::FaceData*)faceData;

/**
 * Notify current position of movie preview or movie generation
 *
 */
- (void)NotifyCurrentPosition:(int)msec;

/**
 * Notify screen shot was taken.
 *
 */
- (void)ScreenShotFinished:(UIImage*)image;

@end


@protocol MpMovieControlDelegate <NSObject>

- (void)RequestStartRenderer:(int)fps;
- (void)RequestStopRenderer:(bool)clearBuffer;
- (void)RequestSetContext;
- (void)RequestRendering;

@end


@interface MpMovieIf : NSObject  {
    id _delegate;
}

@property (nonatomic) id delegate;

-(id) InitWithResourcePath:(NSString*)path;

- (void)SetRenderTarget:(UIView *)view;

/**
 * Set directory path that is including the files
 * needed to play MpMovie.
 * Media data, Audio data, and a couple of other data are needed.
 *
 * @param dir Directory path where the MpMovie data is located.
 * @return    Result of this method.
 */
-(MpMovieResult) SetMovieData:(NSString *)dir;

/**
 * Generate FaceData for corresponding indexed face.
 *
 * @param index Index number of the face for corresponding movie.
 * @param img   Face image
 * @return      Result of this method.
 */
-(MpMovieResult) GenerateFace:(int)index img:(UIImage*)img;


/**
 * Get face information of the specific face.
 *
 */
- (UIImage*) GetFaceItemImage:(int)index type:(MpMovie::FaceItemType)type;

/**
 * Set generated face data to this MpMovie.
 * SetMovieData should be called in prior to this method.
 *
 * @param index Face number to be set.
 * @param face  Face data path.
 * @param parts Parts data to use this face.
 * @return      Result of this method.
 * @hide
 */
-(MpMovieResult) SetFaceData:(int)index face:(NSString*)face parts:(NSString*)parts;


/**
 * Set generated face data to specific index of the MpMovie.
 * Set MovieData should be called in prior to this method.
 *
 * @param index     Face number to be set.
 * @param faceData  faceData to be set, original index
 *                  information will be ignored.
 * @return          Result of this method.
 * @hide
 */
-(MpMovieResult) SetFaceData:(int)index faceData:(MpMovie::FaceData*)faceData;

/**
 * Set generated face data to this MpMovie.
 * SetMovieData should be called in prior to this method.
 *
 * @param faceData faceData to be set.
 * @return      Result of this method.
 */
-(MpMovieResult) SetFaceData:(MpMovie::FaceData*)faceData;

/**
 * Prepare MpMovie to start playback or movie generation.
 *
 * @return      Result of this method.
 */
-(MpMovieResult) Prepare;

/**
 * Start playback of MpMovie.
 *
 * @return      Result of this method.
 */
-(MpMovieResult) Play;

/**
 * Pause playback of MpMovie.
 *
 * @return      Result or this method.
 */
-(MpMovieResult) Pause;

/**
 * UnPause playback of MpMovie.
 *
 * @return      Result of this method.
 */
-(MpMovieResult) UnPause;

/**
 * Suspend playback or or generation of MpMovie
 * Please call this method just before application goes to background
 *
 * @return      Result of this method.
 */
-(MpMovieResult) Suspend;

/**
 * Resume playback or or generation of MpMovie
 * Please call this method just after application becomes actibe from background
 *
 * @return      Result of this method.
 */
-(MpMovieResult) Resume;

/**
 * Seek playback of MpMovie.
 *
 * @param msec  seek range.
 * @return      Result of this method.
 */
-(MpMovieResult) SeekTo:(int)msec;

/**
 * Stop playback of generation of MpMovie.
 * All of the status of playback or generation should be cleared.
 *
 * @return      Result of this method.
 */
-(MpMovieResult) Stop;


/**
 * Clear Face data set in this MpMovie.
 *
 * @param index Face number to be cleared.
 * @return      Result of this method.
 */
-(MpMovieResult)ClearFaceData:(int)index;

/**
 * Release Face data generated by MpMovie.
 *
 * @param faceData face data to be released.
 * @return       Resutl of this method
 *
 */
-(MpMovieResult)FreeFaceData:(MpMovie::FaceData *)faceData;

/**
 * Clear all the data set in this MpMovie.
 *
 * @return      Result of this method.
 */
-(MpMovieResult)ClearData;

/**
 * Release all the data and resource with this MpMovie.
 *
 * @return      Result of this method.
 */
//MpMovieResult Release();


/**
 * Get MpMovie current status.
 *
 * @return      Current status of MpMovie.
 */
-(MpMovie::Status) GetCurrentStatus;


/**
 * Get MpMovie current position in milliseconds
 *
 * @return      Current position;
 */
-(int) GetCurrentPosition;

/**
 * Get MpMovie Integer parameters.
 *
 * @param cmd    Specify parameter type to get.
 * @param intArg Parameter to be got is stored.
 * @return       Result of this method.
 */
-(MpMovieResult)GetIntParam:(MpMovie::ParamCmd)cmd intArg:(int*)intArg;

/**
 * Get MpMovie Integer parameters.
 *
 * @param cmd    Specify parameter type to set.
 * @param intArg Parameter to be set.
 * @return       Result of this method.
 */
-(MpMovieResult)SetIntParam:(MpMovie::ParamCmd)cmd intArg:(int)intArg;

/**
 * Set MpMovie String parameters.
 *
 * @param cmd    Specify parameter type to set.
 * @param strArg Parameter to be set.
 * @return       Result of this method.
 */
-(MpMovieResult)SetStringParam:(MpMovie::ParamCmd)cmd strArg:(NSString*)strArg;



/**
 * Take current screen shot.
 *
 * @return       Result of this method.
 *
 * memo  ScreenShot is delivered with callback.
 */
-(MpMovieResult)TakeScreenShot;


/**
 * Release UIImage allocated by MpMovieSDK.
 *
 * @param  image  UIImage to be released.
 *
 */
- (void)ReleaseImage:(UIImage*)image;


/**
 * Set overlay image for MpMovie.
 * Overlay image is only valid for generation mode,
 * and apply to top or end of generated movie.
 *
 * @param img    image data to be overlayed on generated video.
 * @param pos    top or end of generated movie (default is end)
 * @param msec   overlay duration.
 *
 */
-(MpMovieResult) SetOverlayImage:(UIImage*)image pos:(MpMovie::OverlayImagePositoin)pos msec:(int)msec;


///////////////////////////////////////////////////////////////////////
// Used with MpMovieManager, no need to call the methods below.

/**
 * Execute drawing function on MpMovie. (This is includeing movie and face rendering.)
 *
 * @return      Result of this method
 * @note        Nomally this is only called from MpMovieManager,
 *              but if user want to directly control rendering function, user can call this.
 */
-(MpMovieResult)DrawOneFrame:(int)w h:(int)h;


/**
 * Specify workarea where generated data will be stored.
 *
 * @param workArea
 * @return         Result of this method.
 */
-(MpMovieResult)SetWorkArea:(NSString*)workArea;


@end


// these are the callbacks from MpMovie
class MpMovieControlFunc : public motionportrait::MpMovieControlDelegate
{
public:
    MpMovieControlFunc(void* obj);

    void RequestStartRenderer(int fps);
    void RequestStopRenderer(bool clearBuffer);
    void RequestSetContext();
    void RequestRendering();
private:
    void *mObj;
};
class MpMovieCallbackFunc : public motionportrait::MpMovieDelegate
{
public:
    MpMovieCallbackFunc(void *obj);
    
    void NotifyCurrentPosition(int msec);
    void ScreenShotFinished(MpMovie::NativeImg *image);
    void PlaybackMovieFinished(int status);
    void GenerateMovieFinished(int status);
    
    void GenerateFaceFinished(MpMovieResult ret, MpMovie::FaceData *faceData);
private:
    void *mObj;
};


